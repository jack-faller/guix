#!/usr/bin/env guile
!#


(define greek
  '(("a" "α")
    ("b" "β")
    ("g" "γ") ("G" "Γ")
    ("d" "δ") ("D" "Δ")
    ("e" "ε")
    ("z" "ζ")
    ("n" "η")
    ("o" "θ") ("O" "Θ")
    ("i" "ι")
    ("k" "κ")
    ("l" "λ") ("L" "Λ")
    ("m" "μ")
    ("n" "ν")
    ("x" "ξ") ("X" "Ξ")
    ("p" "π") ("P" "Π")
    ("r" "ρ")
    ("s" "σ") ("S" "Σ")
    ("t" "τ")
    ("u" "υ")
    ("f" "φ") ("F" "Φ")
    ("c" "χ")
    ("p" "ψ") ("P" "Ψ")
    ("w" "ω") ("W" "Ω")))

(define blackboard
  '(("C" "ℂ")
    ("H" "ℍ")
    ("N" "ℕ")
    ("P" "ℙ")
    ("Q" "ℚ")
    ("R" "ℝ")
    ("Z" "ℤ")))

(define math-rules
  '(("sum" "∏")
    ("sum" "∑")
    ("all" "∀")
    ("cup" "∪")
    ("cap" "∩")
    ("cop" "⨿")
    ("land" "∧")
    ("lor" "∨")
    ("u[" "⌈")
    ("u]" "⌉")
    ("d[" "⌊")
    ("d]" "⌋")
    ("[|" "⟦")
    ("|]" "⟧")
    ("top" "⊤")
    ("tac" "⊥")
    ("from" "↤") ("maps" "↦")
    ("froom" "⟻") ("maaps" "⟼")))

(define math-or-/
  '(("ex" "∃" "∄")
    ("div" "∣" "∤")
    ("|-" "⊢" "⊬")
    ("-|" "⊣" #f)
    ("|=" "⊨" "⊭")
    ("||-" "⊩" "⊮")
    ("||=" "⊫" "⊯")
    ("|||-" "⊪" #f)
    ("in" "∈" "∉") ("ni" "∋" "∌")
    ("~" #f "≁")
    ("<|" "⊲" "⋪") ("|>" "⊳" "⋫")
    ("_<|" "⊴" "⋬") ("_|>" "⊵" "⋭")
    ("~_" "≃" "≄") ("_~" "≃" "≄")
    ("~=" "≅" "≆") ("=~" "≅" "≆")
    ("~~" "≈" "≉")
    ("=" #f "≠")
    ("=_" "≡" "≢") ("_=" "≡" "≢")
    ("le" "≤" "≰") ("=<" "≤" "≰")
    ("ge" "≥" "≱") (">=" "≥" "≱")
    ("<" #f "≮") (">" #f "≯")
    ("subs" "⊂" "⊄") ("sups" "⊃" "⊅")
    ("sube" "⊆" "⊈") ("supe" "⊇" "⊉")
    ("img" "⊏" #f) ("orig" "⊐" #f)
    ("ime" "⊑" "⋢") ("orie" "⊒" "⋣")))
;; NOT COVERED
;; # <Multi_key> <U2276> <slash> : "≸"
;; # <Multi_key> <U2277> <slash> : "≹"
;; # <Multi_key> <U227A> <slash> : "⊀"
;; # <Multi_key> <U227B> <slash> : "⊁"
;; # <Multi_key> <U227C> <slash> : "⋠"
;; # <Multi_key> <U227D> <slash> : "⋡"

(define big-math
  '(("land" "⋀")
    ("lor" "⋁")
    ("cup" "⋃")
    ("cap" "⋂")
    ("cop" "∐")
    ("<" "⟨")
    (">" "⟩")
    ("<<" "⟪")
    (">>" "⟫")))

(define table
  '(("~" . "asciitilde")
    ("-" . "dash")
    ("_" . "underscore")
    ("=" . "equal")
    ("/" . "slash")
    ("|" . "bar")
    ("[" . "bracketleft")
    ("]" . "bracketright")
    ("<" . "less")
    (">" . "greater")
    ("!" . "exclam")))

(define (rule code result)
  (format #t "<Multi_key>")
  (string-for-each
   (lambda (c)
     (define s (string c))
     (format #t " <~a>" (or (assoc-ref table s) s)))
   code)
  (format #t " : ~s\n" result))
(define (apply-each f list)
  (for-each (lambda (args) (apply f args)) list))

(define (prefix-rule start)
  (lambda (code result)
    (rule (string-append start code) result)))

(format #t "include \"%L\"\n")
(apply-each (prefix-rule "g") greek)
(apply-each rule math-rules)
(apply-each (prefix-rule "mb") blackboard)
(apply-each (prefix-rule "!") big-math)
(apply-each (lambda (code result slashed)
			  (when result (rule code result))
			  (when slashed (rule (string-append "/" code) slashed)))
			math-or-/)
